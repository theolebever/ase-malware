package encrypt

import (
	"crypto/aes"
	"crypto/cipher"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"os"
)

func Encrypt(inputFile, outputFile, key, iv, mode string) error {
	// Read the file
	plaintext, err := ioutil.ReadFile(inputFile)
	if err != nil {
		return err
	}

	// Convert the key to a byte array
	keyBytes, err := hex.DecodeString(key)
	if err != nil {
		return err
	}

	if len(keyBytes) != 32 {
		return fmt.Errorf("Invalid key length")
	}

	// Create a new cipher block
	block, err := aes.NewCipher(keyBytes)
	if err != nil {
		return err
	}

	// Create a new GCM
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		return err
	}

	nonce, err := hex.DecodeString(iv)
	if err != nil {
		return fmt.Errorf("Failed to decode iv")
	}

	fmt.Printf("Encrypting the file %s...\n", inputFile)
	// Encrypt the file
	result := gcm.Seal(nonce, nonce, plaintext, nil)

	// Delete the original file
	err = os.Remove(inputFile)
	if err != nil {
		return err
	}

	// Create the output filename with .fic2023 extension
	outputFile = inputFile + ".fic2023"

	// Write the result to the output file
	err = ioutil.WriteFile(outputFile, result, 0644)
	if err != nil {
		return err
	}

	fmt.Println("Done!")
	return nil
}
